import express from "express";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import fetch from "node-fetch";
import { JWT } from "google-auth-library";
import { google } from "googleapis";

dotenv.config();

// ===== Google Sheets Setup =====
const SERVICE_ACCOUNT = JSON.parse(process.env.SERVICE_ACCOUNT_JSON);
const MASTER_SHEET_ID = process.env.MASTER_SHEET_ID;
const MASTER_SHEET_NAME = "index";
const LOG_SHEET_ID = process.env.LOG_SHEET_ID; // ‚úÖ ‡∏ä‡∏µ‡∏ï‡πÄ‡∏Å‡πá‡∏ö Logs
const LOG_SHEET_NAME = "Logs";

const LINE_ACCESS_TOKEN = process.env.LINE_ACCESS_TOKEN;

const auth = new JWT({
  email: SERVICE_ACCOUNT.client_email,
  key: SERVICE_ACCOUNT.private_key.replace(/\\n/g, "\n"),
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

const sheets = google.sheets({ version: "v4", auth });

const app = express();
app.use(bodyParser.json());

// ===== Utilities =====
async function getConcertMapping() {
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: MASTER_SHEET_ID,
    range: `${MASTER_SHEET_NAME}!A2:B`,
  });

  const rows = res.data.values || [];
  const map = {};
  for (const [concert, id] of rows) {
    if (concert && id) map[concert.trim()] = id.trim();
  }
  return map;
}

async function logEvent(eventName, role, email, name, adminUID, customerUID) {
  try {
    const timestamp = new Date().toLocaleString("th-TH", {
      timeZone: "Asia/Bangkok",
    });

    await sheets.spreadsheets.values.append({
      spreadsheetId: LOG_SHEET_ID,
      range: LOG_SHEET_NAME,
      valueInputOption: "USER_ENTERED",
      requestBody: {
        values: [[timestamp, eventName, role, email, name, adminUID, customerUID]],
      },
    });
    console.log("üßæ Log saved:", eventName);
  } catch (err) {
    console.error("‚ùå Error logging event:", err.message);
  }
}

async function replyToLine(replyToken, text) {
  const url = "https://api.line.me/v2/bot/message/reply";
  const payload = JSON.stringify({
    replyToken,
    messages: [{ type: "text", text }],
  });

  await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
    },
    body: payload,
  });
}

// ===== Webhook Endpoint =====
app.get("/api/webhook", (req, res) => {
  res.status(200).send("üü¢ LINE Webhook is running!");
});

app.post("/api/webhook", async (req, res) => {
  res.status(200).send("OK");

  const events = req.body.events || [];

  // ‚úÖ Forward event ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Thunder webhook
  try {
    await fetch("https://line.thunder.in.th/api/v1/webhook/e4a3587a-9a99-40f1-8efa-3582c8a47db4", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(req.body),
    });
    console.log("‚úÖ Forwarded to Thunder webhook");
  } catch (err) {
    console.error("‚ùå Error forwarding to Thunder:", err.message);
  }

  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô logic ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  for (const event of events) {
    const source = event.source || {};

    // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
    if (event.type === "join" && source.type === "group") {
      console.log("üÜï Bot ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà!");
      console.log("üìå Group ID:", source.groupId);
      await replyToLine(
        event.replyToken,
        `‚úÖ ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ!\nGroup ID: ${source.groupId}`
      );
      continue;
    }

    // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if (event.type === "message" && event.message.type === "text") {
      const message = event.message.text.trim();
      const userId = event.source.userId;

      // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå ‚Äú‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‚Äù
      if (/‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢/i.test(message)) {
        console.log(`üõë ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß`);

        const concertMap = await getConcertMapping();
        for (const [concertName, sheetId] of Object.entries(concertMap)) {
          try {
            const res = await sheets.spreadsheets.values.get({
              spreadsheetId: sheetId,
              range: "A2:O",
            });

            const rows = res.data.values || [];
            for (let i = 0; i < rows.length; i++) {
              const row = rows[i];
              const uidCell = row[4]; // E
              if (uidCell === userId) {
                console.log(`‚úÖ ‡∏û‡∏ö UID ‡πÉ‡∏ô ${concertName}, ‡πÅ‡∏ñ‡∏ß ${i + 2}`);

                // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå N (‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î)
                await sheets.spreadsheets.values.update({
                  spreadsheetId: sheetId,
                  range: `N${i + 2}`,
                  valueInputOption: "USER_ENTERED",
                  requestBody: { values: [[true]] },
                });

                const fileName = concertName;
                const roundDate = row[6] || "-"; // G
                const queueNo = row[0] || "-";
                const operator = "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏ú‡πà‡∏≤‡∏ô LINE OA)";
                const notifiedAt = new Date().toLocaleString("th-TH", {
                  timeZone: "Asia/Bangkok",
                });

                // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° LINE
                const groupMessage =
                  `[üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î ‚Äì ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß]\n\n` +
                  `‡∏á‡∏≤‡∏ô: ${fileName}\n` +
                  `‡∏Ñ‡∏¥‡∏ß: ${queueNo}\n` +
                  `‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á: ${roundDate}\n` +
                  `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: (UID: ${userId})\n` +
                  `‡πÇ‡∏î‡∏¢: ${operator} | ‡πÄ‡∏ß‡∏•‡∏≤: ${notifiedAt}`;

                await fetch("https://api.line.me/v2/bot/message/push", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
                  },
                  body: JSON.stringify({
                    to: process.env.LINE_GROUP_ID,
                    messages: [{ type: "text", text: groupMessage }],
                  }),
                });

                console.log("üì© ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");

                // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log
                const eventName = `‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏≠‡∏á) - ${fileName} / ‡∏£‡∏≠‡∏ö: ${roundDate}`;
                await logEvent(
                  eventName,
                  "Customer",
                  "-",
                  "-",
                  "-",
                  userId
                );

                return;
              }
            }
          } catch (err) {
            console.error(`‚ö†Ô∏è ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏µ‡∏ï ${concertName} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:`, err.message);
          }
        }

        await replyToLine(event.replyToken, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πà‡∏∞");
        continue;
      }

      // ‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ / ‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™)
      if (message === "‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤") {
        await replyToLine(event.replyToken, `‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠: ${userId}`);
      } else if (message.startsWith("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")) {
        const match = message.match(/^‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\s+(.+?)(?:\s+‡πÉ‡∏ô\s+(.+))?$/);
        if (!match) {
          await replyToLine(
            event.replyToken,
            `‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:\n` +
              `‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ [‡∏ä‡∏∑‡πà‡∏≠] ‡∏´‡∏£‡∏∑‡∏≠ [‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£] ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï\n` +
              `‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ [‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô] ‡πÉ‡∏ô [‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï] ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï‡∏ô‡∏±‡πâ‡∏ô\n` +
              `\nüìå ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ itstudent\n‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ itstudent ‡πÉ‡∏ô SupalaiConcert`
          );
          return;
        }

        const keyword = match[1].trim();
        const targetConcert = match[2]?.trim() || null;
        const result = await searchUID(keyword, targetConcert);
        await replyToLine(event.replyToken, result);
      }
    }
  }
});

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Search UID (‡πÄ‡∏î‡∏¥‡∏°) =====
async function searchUID(keyword, targetConcert = null) {
  const concertMap = await getConcertMapping();
  let results = [];

  const targets = targetConcert
    ? Object.entries(concertMap).filter(
        ([name]) => name.trim() === targetConcert.trim()
      )
    : Object.entries(concertMap);

  if (targets.length === 0)
    return `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï‡∏ä‡∏∑‡πà‡∏≠ "${targetConcert}" ‡πÉ‡∏ô Master Sheet`;

  for (const [concertName, sheetId] of targets) {
    try {
      const meta = await sheets.spreadsheets.get({ spreadsheetId: sheetId });
      const sheetNames = meta.data.sheets.map((s) => s.properties.title);

      for (const sheetName of sheetNames) {
        try {
          const res = await sheets.spreadsheets.values.get({
            spreadsheetId: sheetId,
            range: `${sheetName}!A2:E`,
          });

          const rows = res.data.values || [];
          for (const row of rows) {
            const order = row[0];
            const name = row[2];
            const phone = row[3];
            const uid = row[4];
            const matchByOrder =
              targetConcert && order && order.toString() === keyword;
            const matchByName = name && name.includes(keyword);
            const matchByPhone = phone && phone.includes(keyword);
            if (matchByOrder || matchByName || matchByPhone) {
              results.push(
                `üéüÔ∏è [${concertName} - ${sheetName}]\n‡∏•‡∏≥‡∏î‡∏±‡∏ö: ${order}\n‡∏ä‡∏∑‡πà‡∏≠: ${name}\n‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${phone}\nUID: ${uid}`
              );
            }
          }
        } catch (err) {
          console.log(
            `‚ö†Ô∏è ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ó‡πá‡∏ö ${sheetName} ‡∏Ç‡∏≠‡∏á ${concertName} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${err.message}`
          );
        }
      }
    } catch (err) {
      console.log(`‚ö†Ô∏è ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå ${concertName} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${err.message}`);
    }
  }

  if (results.length === 0)
    return `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö "${keyword}" ‡πÉ‡∏ô${
      targetConcert
        ? `‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï "${targetConcert}"`
        : "‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï‡πÉ‡∏ô Master Sheet"
    }`;

  return results.join("\n\n");
}

// ===== Start Server =====
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));

