import express from "express";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import fetch from "node-fetch";
import FormData from "form-data";
import { JWT } from "google-auth-library";
import { google } from "googleapis";
import { initializeApp } from "firebase/app";
import { getDatabase, ref, get, set } from "firebase/database";

dotenv.config();

// ===== Google Sheets Setup =====
const SERVICE_ACCOUNT = JSON.parse(process.env.SERVICE_ACCOUNT_JSON);
const MASTER_SHEET_ID = process.env.MASTER_SHEET_ID;
const MASTER_SHEET_NAME = "index";
const LOG_SHEET_ID = process.env.LOG_SHEET_ID;
const LOG_SHEET_NAME = "Logs";
const LINE_ACCESS_TOKEN = process.env.LINE_ACCESS_TOKEN;
const THUNDER_API_KEY = process.env.THUNDER_API_KEY;

// ===== Google Auth =====
const auth = new JWT({
  email: SERVICE_ACCOUNT.client_email,
  key: SERVICE_ACCOUNT.private_key.replace(/\\n/g, "\n"),
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});
const sheets = google.sheets({ version: "v4", auth });

// ===== Firebase Setup =====
const firebaseConfig = {
  apiKey: process.env.FIREBASE_API_KEY,
  authDomain: process.env.FIREBASE_AUTH_DOMAIN,
  databaseURL: process.env.FIREBASE_DB_URL,
  projectId: process.env.FIREBASE_PROJECT_ID,
  storageBucket: process.env.FIREBASE_BUCKET,
  messagingSenderId: process.env.FIREBASE_SENDER_ID,
  appId: process.env.FIREBASE_APP_ID,
  measurementId: process.env.FIREBASE_MEASUREMENT_ID,
};
const firebaseApp = initializeApp(firebaseConfig);
const db = getDatabase(firebaseApp);

// ===== Utilities =====
async function replyToLine(replyToken, text) {
  const url = "https://api.line.me/v2/bot/message/reply";
  const payload = JSON.stringify({
    replyToken,
    messages: [{ type: "text", text }],
  });
  await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
    },
    body: payload,
  });
}

async function getConcertMapping() {
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: MASTER_SHEET_ID,
    range: `${MASTER_SHEET_NAME}!A2:B`,
  });
  const rows = res.data.values || [];
  const map = {};
  for (const [concert, id] of rows) {
    if (concert && id) map[concert.trim()] = id.trim();
  }
  return map;
}

async function logEvent(eventName, role, email, name, adminUID, customerUID) {
  try {
    const timestamp = new Date().toLocaleString("th-TH", {
      timeZone: "Asia/Bangkok",
    });
    await sheets.spreadsheets.values.append({
      spreadsheetId: LOG_SHEET_ID,
      range: LOG_SHEET_NAME,
      valueInputOption: "USER_ENTERED",
      requestBody: {
        values: [
          [timestamp, eventName, role, email, name, adminUID, customerUID],
        ],
      },
    });
    console.log("üßæ Log saved:", eventName);
  } catch (err) {
    console.error("‚ùå Error logging event:", err.message);
  }
}

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢ UID + ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô =====
async function searchUID(uid, concertName) {
  if (!uid || !concertName)
    return `‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡πà‡∏∞\n‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ {UID} ‡πÉ‡∏ô {‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï}`;

  const concertMap = await getConcertMapping();
  const target = Object.entries(concertMap).find(
    ([name]) => name.trim() === concertName.trim()
  );

  if (!target) return `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï‡∏ä‡∏∑‡πà‡∏≠ "${concertName}" ‡πÉ‡∏ô Master Sheet`;

  const [concert, sheetId] = target;

  try {
    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï
    const meta = await sheets.spreadsheets.get({ spreadsheetId: sheetId });
    const sheetNames = meta.data.sheets.map((s) => s.properties.title);

    for (const sheetName of sheetNames) {
      try {
        // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A ‡∏ñ‡∏∂‡∏á P
        const res = await sheets.spreadsheets.values.get({
          spreadsheetId: sheetId,
          range: `${sheetName}!A2:P`,
        });

        const rows = res.data.values || [];
        for (const row of rows) {
          const uidValue = row[4]; // ‚úÖ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå E = UID
          const nameValue = row[2]; // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á
          const zoneValue = row[11]; // ‚úÖ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L = Zone ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
          const amount = row[7]; // ‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (H)
          const price = row[8]; // ‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏±‡∏ï‡∏£ (I)
          const orderLink = row[12]; // ‚úÖ ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå M = ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
          const round = row[6]; //‚úÖ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G = ‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
          if (uidValue && uidValue.trim() === uid.trim()) {
            return (
              `‚ô° ùöûùöôùöçùöäùöùùöé : ‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≤ ‚ô° ìàí ·êü üéüÔ∏è‚ú®\n` +
              `üéüÔ∏è ‡∏á‡∏≤‡∏ô: ${concert}\n` +
              `üìÖ ‡∏ß‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á: ${round || "-"}\n` +
              `üí∏ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${price || "-"} ‡∏ö‡∏≤‡∏ó\n` +
              `üìç ‡πÇ‡∏ã‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á: ${zoneValue || "-"}\n` +
              `üí∫ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${amount || "-"} ‡πÉ‡∏ö\n\n` +
              `${orderLink ? orderLink : "-"}`
            );
          }
        }
      } catch (err) {
        console.log(`‚ö†Ô∏è ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ó‡πá‡∏ö ${sheetName} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${err.message}`);
      }
    }

    return `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö UID "${uid}" ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï "${concertName}"`;
  } catch (err) {
    console.error(`‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏µ‡∏ï ${concertName} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, err.message);
    return `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï "${concertName}" ‡πÑ‡∏î‡πâ`;
  }
}

// ===== Express App =====
const app = express();
app.use(bodyParser.json());

app.get("/api/webhook", (req, res) => {
  res.status(200).send("üü¢ LINE Webhook is running!");
});

app.post("/api/webhook", async (req, res) => {
  res.status(200).send("OK");
  const events = req.body.events || [];

  for (const event of events) {
    // ===== TEXT MESSAGE =====
    if (event.type === "message" && event.message.type === "text") {
      const message = event.message.text.trim();
      const userId = event.source.userId;
         // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå ‚Äú‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‚Äù
      if (/‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢/i.test(message)) {
        console.log(`üõë ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß`);

        const concertMap = await getConcertMapping();
        for (const [concertName, sheetId] of Object.entries(concertMap)) {
          try {
            const res = await sheets.spreadsheets.values.get({
              spreadsheetId: sheetId,
              range: "A2:O",
            });

            const rows = res.data.values || [];
            for (let i = 0; i < rows.length; i++) {
              const row = rows[i];
              const uidCell = row[4]; // E
              if (uidCell === userId) {
                console.log(`‚úÖ ‡∏û‡∏ö UID ‡πÉ‡∏ô ${concertName}, ‡πÅ‡∏ñ‡∏ß ${i + 2}`);

                // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå N (‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î)
                await sheets.spreadsheets.values.update({
                  spreadsheetId: sheetId,
                  range: `N${i + 2}`,
                  valueInputOption: "USER_ENTERED",
                  requestBody: { values: [[true]] },
                });

                const fileName = concertName;
                const roundDate = row[6] || "-"; // G
                const queueNo = row[0] || "-";
                const operator = "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏ú‡πà‡∏≤‡∏ô LINE OA)";
                const notifiedAt = new Date().toLocaleString("th-TH", {
                  timeZone: "Asia/Bangkok",
                });

                // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° LINE
                const groupMessage =
                  `[üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î ‚Äì ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß]\n\n` +
                  `‡∏á‡∏≤‡∏ô: ${fileName}\n` +
                  `‡∏Ñ‡∏¥‡∏ß: ${queueNo}\n` +
                  `‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á: ${roundDate}\n` +
                  `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: (UID: ${userId})\n` +
                  `‡πÇ‡∏î‡∏¢: ${operator} | ‡πÄ‡∏ß‡∏•‡∏≤: ${notifiedAt}`;

                await fetch("https://api.line.me/v2/bot/message/push", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
                  },
                  body: JSON.stringify({
                    to: process.env.LINE_GROUP_ID,
                    messages: [{ type: "text", text: groupMessage }],
                  }),
                });

                console.log("üì© ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");

                // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log
                const eventName = `‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏î (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏≠‡∏á) - ${fileName} / ‡∏£‡∏≠‡∏ö: ${roundDate}`;
                await logEvent(
                  eventName,
                  "Customer",
                  "-",
                  "-",
                  "-",
                  userId
                );

                return;
              }
            }
          } catch (err) {
            console.error(`‚ö†Ô∏è ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏µ‡∏ï ${concertName} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:`, err.message);
          }
        }

        await replyToLine(event.replyToken, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πà‡∏∞");
        continue;
      }

      if (message === "‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤") {
        await replyToLine(
          event.replyToken,
          `‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠: ${event.source.userId}`
        );
      } else if (message.startsWith("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")) {
        const match = message.match(/^‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\s+(.+?)(?:\s+‡πÉ‡∏ô\s+(.+))?$/);
        if (!match) {
          await replyToLine(
            event.replyToken,
            `‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:\n` +
              `‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ [UID] ‡πÉ‡∏ô [‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï]\n\n` +
              `üìå ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:\n` +
              `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ U123abc ‡πÉ‡∏ô NCTConcert\n` +
              `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ U512a89 ‡πÉ‡∏ô Blackpink2025\n\n` +
              `‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á UID ‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞ üéüÔ∏è`
          );
          return;
        }

        const keyword = match[1].trim();
        const targetConcert = match[2]?.trim() || null;
        const result = await searchUID(keyword, targetConcert);
        await replyToLine(event.replyToken, result);
      }
    }

    // ===== IMAGE MESSAGE (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ) =====
    else if (event.type === "message" && event.message.type === "image") {
      try {
        const messageId = event.message.id;
        const imageRes = await fetch(
          `https://api-data.line.me/v2/bot/message/${messageId}/content`,
          { headers: { Authorization: `Bearer ${LINE_ACCESS_TOKEN}` } }
        );
        if (!imageRes.ok) throw new Error("‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        const buffer = Buffer.from(await imageRes.arrayBuffer());

        // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Thunder API
        const formData = new FormData();
        formData.append("file", buffer, {
          filename: "slip.jpg",
          contentType: "image/jpeg",
        });

        const thunderRes = await fetch("https://api.thunder.in.th/v1/verify", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${THUNDER_API_KEY}`,
            ...formData.getHeaders(),
          },
          body: formData,
        });

        const thunderData = await thunderRes.json();
        if (!thunderData?.data?.payload) {
          await replyToLine(
            event.replyToken,
            "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
          );
          continue;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏î‡πâ‡∏ß‡∏¢ payload
        const payloadRes = await fetch(
          `https://api.thunder.in.th/v1/verify?payload=${thunderData.data.payload}`,
          { headers: { Authorization: `Bearer ${THUNDER_API_KEY}` } }
        );
        const slipData = await payloadRes.json();

        const transRef = slipData?.data?.transRef;
        if (!transRef) {
          await replyToLine(
            event.replyToken,
            "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
          );
          continue;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥‡πÉ‡∏ô Firebase
        const slipRef = ref(db, `slips/${transRef}`);
        const snapshot = await get(slipRef);
        if (snapshot.exists()) {
          await replyToLine(
            event.replyToken,
            "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏™‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞"
          );
          continue;
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà
        await set(slipRef, slipData);

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        const { amount, date, sender, receiver } = slipData.data;

        const receiverNameTh = receiver?.account?.name?.th || "";
        const receiverNameEn = receiver?.account?.name?.en || "";

        const isCorrectReceiver = receiverNameTh.includes("‡∏ô.‡∏™. ‡∏ä‡∏é‡∏≤‡∏ò‡∏≤‡∏£‡∏µ ‡∏ö");

        if (!isCorrectReceiver) {
          console.warn(
            "üö´ ‡∏™‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î:",
            receiverNameTh || receiverNameEn
          );
          await replyToLine(
            event.replyToken,
            "‚ùå ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏™‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ô.‡∏™. ‡∏ä‡∏é‡∏≤‡∏ò‡∏≤‡∏£‡∏µ ‡∏ö)\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞"
          );
          continue; // ‚ùó ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firebase
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚Äî ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
        const senderBank = sender?.bank?.short || sender?.bank?.name || "-";
        const senderAcc =
          sender?.account?.bank?.account ||
          sender?.account?.proxy?.account ||
          "-";
        const receiverBank =
          receiver?.bank?.short || receiver?.bank?.name || "-";
        const receiverAcc =
          receiver?.account?.bank?.account ||
          receiver?.account?.proxy?.account ||
          "-";
        const formattedDate = new Date(date).toLocaleString("th-TH", {
          timeZone: "Asia/Bangkok",
        });

        const message =
          `‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏∞\n\n` +
          `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô: ${formattedDate}\n` +
          `üí∞ ‡∏¢‡∏≠‡∏î‡πÇ‡∏≠‡∏ô: ${amount?.amount || "-"} ‡∏ö‡∏≤‡∏ó\n` +
          `üè¶ ‡∏à‡∏≤‡∏Å: ${senderBank} (${senderAcc})\n` +
          `‚û°Ô∏è ‡∏ñ‡∏∂‡∏á: ${receiverBank} (${receiverAcc})\n` +
          `üë©‚Äçüíº ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: ${receiverNameTh || receiverNameEn}\n` +
          `üîñ ‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: ${slipData.data.transRef}`;

        await set(ref(db, `slips/${slipData.data.transRef}`), slipData);
        await replyToLine(event.replyToken, message);
      } catch (err) {
        console.error("‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        await replyToLine(
          event.replyToken,
          "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        );
      }
    }
  }
});
app.post("/api/push-line", async (req, res) => {
  try {
    const { uid, message } = req.body;

    if (!uid || !message) {
      return res.status(400).json({ error: "Missing uid or message" });
    }

    // üîπ ‡∏™‡πà‡∏á LINE ‡πÅ‡∏ö‡∏ö push ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    const linePush = await fetch("https://api.line.me/v2/bot/message/push", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
      },
      body: JSON.stringify({
        to: uid,
        messages: [{ type: "text", text: message }],
      }),
    });

    if (!linePush.ok) {
      const errMsg = await linePush.text();
      console.error("‚ùå Error sending LINE:", errMsg);
      return res.status(500).json({ error: "LINE push failed", details: errMsg });
    }

    console.log(`üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á ${uid}`);
    res.status(200).json({ success: true });
  } catch (err) {
    console.error("‚ùå Push error:", err);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));

